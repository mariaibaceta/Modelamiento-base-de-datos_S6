
--------------------------------------------------------------------------------
-- PRY2204 - Semana 6
-- Implementando un modelo relacional con sentencias SQL
-- Autora: Maria Ibaceta (script preparado y comentado paso a paso)
-- DB: Oracle
-- NOTA: Este script está organizado para ejecutar de forma secuencial sin errores.
--       Incluye: drops, DDL (Caso 1) y modificaciones (Caso 2).
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- LIMPIEZA PREVIA (por si existen objetos de una ejecución anterior)
--------------------------------------------------------------------------------
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE pago CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE receta_medicamento CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE receta CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE medicamento CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE digitador CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE medico CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE especialidad CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE paciente CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE comuna CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ciudad CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE region CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
-- Fin limpieza
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- CASO 1: CONSTRUCCIÓN DEL MODELO RELACIONAL NORMALIZADO
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Dimensiones geográficas mínimas para dirección del paciente
--------------------------------------------------------------------------------
CREATE TABLE region (
  id_region     NUMBER GENERATED BY DEFAULT AS IDENTITY
                      START WITH 1 INCREMENT BY 1,
  nombre        VARCHAR2(100) NOT NULL,
  CONSTRAINT region_pk PRIMARY KEY (id_region),
  CONSTRAINT region_nombre_uk UNIQUE (nombre)
);

-- ciudad depende de región
CREATE TABLE ciudad (
  id_ciudad     NUMBER GENERATED BY DEFAULT AS IDENTITY
                      START WITH 1 INCREMENT BY 1,
  nombre        VARCHAR2(120) NOT NULL,
  id_region     NUMBER NOT NULL,
  CONSTRAINT ciudad_pk PRIMARY KEY (id_ciudad),
  CONSTRAINT ciudad_region_fk FOREIGN KEY (id_region)
    REFERENCES region (id_region)
);

-- Requisito: COMUNA con identity que comience en 1101 e incremente en 1
CREATE TABLE comuna (
  id_comuna     NUMBER GENERATED BY DEFAULT AS IDENTITY
                      START WITH 1101 INCREMENT BY 1,
  nombre        VARCHAR2(120) NOT NULL,
  id_ciudad     NUMBER NOT NULL,
  CONSTRAINT comuna_pk PRIMARY KEY (id_comuna),
  CONSTRAINT comuna_ciudad_fk FOREIGN KEY (id_ciudad)
    REFERENCES ciudad (id_ciudad)
);

--------------------------------------------------------------------------------
-- Entidades de personas del sistema
--------------------------------------------------------------------------------
-- Reglas: DV solo 0-9 o K; se usará CHECK con REGEXP_LIKE (en mayúscula)
--         Para mostrar el conocimiento del estándar local, se separa rut y dv.
--------------------------------------------------------------------------------

CREATE TABLE paciente (
  id_paciente       NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  rut               NUMBER(8,0) NOT NULL,
  dv                CHAR(1)     NOT NULL,
  nombres           VARCHAR2(120) NOT NULL,
  apellidos         VARCHAR2(120) NOT NULL,
  telefono          VARCHAR2(20),
  direccion         VARCHAR2(200),
  id_region         NUMBER,
  id_ciudad         NUMBER,
  id_comuna         NUMBER,
  -- Por requerimiento del Caso 2 se eliminará "edad" y se agregará "fecha_nacimiento"
  edad              NUMBER(3,0),
  CONSTRAINT paciente_pk PRIMARY KEY (id_paciente),
  CONSTRAINT paciente_rut_dv_uk UNIQUE (rut, dv),
  CONSTRAINT paciente_dv_ck CHECK (REGEXP_LIKE(UPPER(dv), '^[0-9K]$')),
  CONSTRAINT paciente_region_fk FOREIGN KEY (id_region) REFERENCES region(id_region),
  CONSTRAINT paciente_ciudad_fk FOREIGN KEY (id_ciudad) REFERENCES ciudad(id_ciudad),
  CONSTRAINT paciente_comuna_fk FOREIGN KEY (id_comuna) REFERENCES comuna(id_comuna)
);

CREATE TABLE especialidad (
  -- Requisito: ID autoincremental
  id_especialidad   NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  nombre            VARCHAR2(120) NOT NULL,
  CONSTRAINT especialidad_pk PRIMARY KEY (id_especialidad),
  CONSTRAINT especialidad_nombre_uk UNIQUE (nombre)
);

CREATE TABLE medico (
  id_medico         NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  rut               NUMBER(8,0) NOT NULL,
  dv                CHAR(1)     NOT NULL,
  nombres           VARCHAR2(120) NOT NULL,
  apellidos         VARCHAR2(120) NOT NULL,
  telefono          VARCHAR2(20) NOT NULL,
  id_especialidad   NUMBER NOT NULL,
  CONSTRAINT medico_pk PRIMARY KEY (id_medico),
  CONSTRAINT medico_rut_dv_uk UNIQUE (rut, dv),
  CONSTRAINT medico_dv_ck CHECK (REGEXP_LIKE(UPPER(dv), '^[0-9K]$')),
  -- Requisito: teléfono de médico único (no se repite entre médicos)
  CONSTRAINT medico_tel_uk UNIQUE (telefono),
  CONSTRAINT medico_especialidad_fk FOREIGN KEY (id_especialidad)
    REFERENCES especialidad (id_especialidad)
);

CREATE TABLE digitador (
  id_digitador      NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  rut               NUMBER(8,0) NOT NULL,
  dv                CHAR(1)     NOT NULL,
  nombres           VARCHAR2(120) NOT NULL,
  apellidos         VARCHAR2(120) NOT NULL,
  CONSTRAINT digitador_pk PRIMARY KEY (id_digitador),
  CONSTRAINT digitador_rut_dv_uk UNIQUE (rut, dv),
  CONSTRAINT digitador_dv_ck CHECK (REGEXP_LIKE(UPPER(dv), '^[0-9K]$'))
);

--------------------------------------------------------------------------------
-- Medicamentos
--------------------------------------------------------------------------------
CREATE TABLE medicamento (
  id_medicamento    NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  nombre            VARCHAR2(150) NOT NULL,
  dosis_recomendada VARCHAR2(80),
  stock_disponible  NUMBER(10,0) DEFAULT 0 NOT NULL,
  tipo              VARCHAR2(20), -- genérico / marca, etc.
  CONSTRAINT medicamento_pk PRIMARY KEY (id_medicamento),
  CONSTRAINT medicamento_nombre_uk UNIQUE (nombre),
  CONSTRAINT medicamento_stock_ck CHECK (stock_disponible >= 0)
);

--------------------------------------------------------------------------------
-- Recetas (emitidas por médicos, ingresadas por digitadores, para pacientes)
-- Regla: una receta tiene un diagnóstico (único texto)
--        tipos: DIGITAL, MAGISTRAL, RETENIDA, GENERAL, VETERINARIA
--------------------------------------------------------------------------------
CREATE TABLE receta (
  id_receta         NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  id_paciente       NUMBER NOT NULL,
  id_medico         NUMBER NOT NULL,
  id_digitador      NUMBER NOT NULL,
  fecha_emision     DATE   NOT NULL,
  fecha_expiracion  DATE,
  duracion_tratamiento VARCHAR2(50),
  observaciones     VARCHAR2(500),
  diagnostico       VARCHAR2(500) NOT NULL,
  tipo_receta       VARCHAR2(15)  NOT NULL,
  CONSTRAINT receta_pk PRIMARY KEY (id_receta),
  CONSTRAINT receta_tipo_ck CHECK (UPPER(tipo_receta) IN 
     ('DIGITAL','MAGISTRAL','RETENIDA','GENERAL','VETERINARIA')),
  CONSTRAINT receta_paciente_fk  FOREIGN KEY (id_paciente)  REFERENCES paciente(id_paciente),
  CONSTRAINT receta_medico_fk    FOREIGN KEY (id_medico)    REFERENCES medico(id_medico),
  CONSTRAINT receta_digitador_fk FOREIGN KEY (id_digitador) REFERENCES digitador(id_digitador)
);

--------------------------------------------------------------------------------
-- Relación Receta - Medicamento (una receta puede tener 1..n medicamentos)
--------------------------------------------------------------------------------
CREATE TABLE receta_medicamento (
  id_receta       NUMBER NOT NULL,
  id_medicamento  NUMBER NOT NULL,
  cantidad        NUMBER(6,0) DEFAULT 1 NOT NULL,
  CONSTRAINT receta_med_pk PRIMARY KEY (id_receta, id_medicamento),
  CONSTRAINT receta_med_receta_fk      FOREIGN KEY (id_receta) 
     REFERENCES receta(id_receta),
  CONSTRAINT receta_med_medicamento_fk FOREIGN KEY (id_medicamento) 
     REFERENCES medicamento(id_medicamento),
  CONSTRAINT receta_med_cantidad_ck CHECK (cantidad > 0)
);

--------------------------------------------------------------------------------
-- Pagos (una receta puede tener uno o más pagos)
--------------------------------------------------------------------------------
CREATE TABLE pago (
  id_pago         NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 INCREMENT BY 1,
  id_receta       NUMBER NOT NULL,
  monto_pagado    NUMBER(12,0) NOT NULL,
  fecha_pago      DATE NOT NULL,
  -- En CASO 2 se agrega metodo_pago y restricciones
  CONSTRAINT pago_pk PRIMARY KEY (id_pago),
  CONSTRAINT pago_monto_ck CHECK (monto_pagado > 0),
  CONSTRAINT pago_receta_fk FOREIGN KEY (id_receta) REFERENCES receta(id_receta)
);

--------------------------------------------------------------------------------
-- (Opcional) Índices de apoyo habituales
--------------------------------------------------------------------------------
CREATE INDEX idx_paciente_region ON paciente(id_region);
CREATE INDEX idx_paciente_ciudad ON paciente(id_ciudad);
CREATE INDEX idx_paciente_comuna ON paciente(id_comuna);
CREATE INDEX idx_receta_paciente ON receta(id_paciente);
CREATE INDEX idx_receta_medico   ON receta(id_medico);


--------------------------------------------------------------------------------
-- CASO 2: MODIFICACIONES CON ALTER TABLE
-- 1) Agregar precio_unitario a medicamento con CHECK entre 1000 y 2000000
-- 2) Agregar metodo_pago a pago con CHECK IN (EFECTIVO, TARJETA, TRANSFERENCIA)
-- 3) En paciente: eliminar edad y agregar fecha_nacimiento
--------------------------------------------------------------------------------

-- (1) Precio unitario en medicamento
ALTER TABLE medicamento
  ADD (precio_unitario NUMBER(12,0));

ALTER TABLE medicamento
  ADD CONSTRAINT medicamento_precio_ck
  CHECK (precio_unitario BETWEEN 1000 AND 2000000);

-- (2) Método de pago en pago
ALTER TABLE pago
  ADD (metodo_pago VARCHAR2(15));

ALTER TABLE pago
  ADD CONSTRAINT pago_metodo_ck
  CHECK (UPPER(metodo_pago) IN ('EFECTIVO','TARJETA','TRANSFERENCIA'));

-- (3) Reemplazar edad por fecha_nacimiento en paciente
ALTER TABLE paciente
  DROP COLUMN edad;

ALTER TABLE paciente
  ADD (fecha_nacimiento DATE);

--------------------------------------------------------------------------------
-- COMENTARIOS FINALES
-- - Se cubren: PK, FK, UNIQUE, CHECK, NOT NULL.
-- - Se implementan IDENTITY en: especialidad (requisito), comuna (start=1101).
-- - Se agregan restricciones específicas de negocio (DV, teléfono único, tipos).
-- - El script está comentado y ordenado para ejecución secuencial.
--------------------------------------------------------------------------------
